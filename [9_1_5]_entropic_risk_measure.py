# -*- coding: utf-8 -*-
"""[9_1.5] entropic risk measure

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eGcHV4e5jvVfPXEebjUgvIrAcchSwY5i

### entropic_risk_measure
"""

import torch
from torch import Tensor
import math

def entropic_risk_measure(input: Tensor, a: float = 1.0) -> Tensor:
    """Returns the entropic risk measure.

    See :class:`pfhedge.nn.EntropicRiskMeasure` for details.
    """
    return (torch.logsumexp(-input * a, dim=0) - math.log(input.size(0))) / a

x = -torch.arange(4.0)
x

entropic_risk_measure(x)

torch.logsumexp(-x, dim=0)

-x

-x.exp()

-x.exp().sum()

-x.exp().sum().log()

import torch

# Define x as -torch.arange(4.0)
x = -torch.arange(4.0)

# logsumexp method (numerically stable)
result_stable = torch.logsumexp(-x, dim=0)

# Direct computation method (potentially unstable)
result_unstable = -x.exp().sum().log()

print("x:", x)
print("Result using torch.logsumexp:", result_stable)
print("Result using direct method:", result_unstable)

import torch

# Example tensor with large and small values
x = torch.tensor([1000.0, 1000.1, 1000.2])

# logsumexp method (numerically stable)
result_stable = torch.logsumexp(-x, dim=0)

# Direct computation method (potentially unstable)
result_unstable = -x.exp().sum().log()

print("Result using torch.logsumexp:", result_stable)
print("Result using direct method:", result_unstable)

