# -*- coding: utf-8 -*-
"""[5_2] decorator, abstract class

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uxMsaUBXQf7QWIWnjMlsoePJo09O7QY6

# Nested function
"""

def make_multiplier(n):
    def multiplier(x):
        return x * n
    return multiplier

a = make_multiplier(2)

a(10)

b = make_multiplier(3)

b(10)

"""### Closure 예제

https://colab.research.google.com/drive/17TEG7NmpwZIHcrHFOGvNhZxvAYGj6VNg?usp=sharing

# Decorator
"""

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()

"""### Example @property"""

class Celsius:
    def __init__(self, temperature=0):
        self._temperature = temperature

    @property
    def temperature(self):
        print("Getting temperature")
        return self._temperature

    # @temperature.setter
    # def temperature(self, value):
    #     if value < -273.15:
    #         raise ValueError("Temperature cannot be below -273.15 degrees Celsius")
    #     print("Setting temperature")
    #     self._temperature = value

    # @temperature.deleter
    # def temperature(self):
    #     print("Deleting temperature")
    #     del self._temperature

# # Usage
# c = Celsius(25)
# print(c.temperature)  # Calls the getter
# # c.temperature = 30    # Calls the setter
# # del c.temperature     # Calls the deleter

a = Celsius(100)

a.temperature

"""## Examples"""

class MyClass:
    class_variable = "Class Variable"

    def __init__(self):
        print("hello")

    def instance_method(self):
        return "This is an instance method."

    @staticmethod
    def static_method():
        return "This is a static method."

    @classmethod
    def class_method(cls):
        return f"This is a class method. {cls.class_variable}"

print(MyClass.static_method(1))  # Output: This is a static method.
print(MyClass.class_method())   # Output: This is a class method. Class Variable

MyClass().instance_method()

"""# Abstract Class"""

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass

    @abstractmethod
    def move(self):
        pass

class Dog(Animal):
    def sound(self):
        return "Bark"

    def move(self):
        return "Walks on four legs"

class Bird(Animal):
    def sound(self):
        return "Chirp"

    def move(self):
        return "Flies"

# You cannot instantiate the abstract class
# animal = Animal()  # This will raise an error

# You can instantiate the subclasses
dog = Dog()
print(dog.sound())  # Output: Bark
print(dog.move())   # Output: Walks on four legs

bird = Bird()
print(bird.sound())  # Output: Chirp
print(bird.move())   # Output: Flies

