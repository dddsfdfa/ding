# -*- coding: utf-8 -*-
"""[7_1] delta hedging

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G4sPyN5bzKtcv8uA7JdGFG00Ox15U5Tm
"""

import numpy as np
import matplotlib.pyplot as plt

import torch

!pip install pfhedge

import pfhedge

pfhedge.stochastic.generate_geometric_brownian(2,10)

temp

from pfhedge.instruments import BrownianStock
from pfhedge.instruments import EuropeanOption
from pfhedge.nn import BlackScholes

stock = BrownianStock()
derivative = EuropeanOption(stock, strike=1.1)
derivative

m = BlackScholes(derivative)
m

m.inputs()

stock.simulate(2)

stock.spot

derivative.moneyness()

stock.spot / 1.1

derivative.time_to_maturity()

stock.volatility

log_moneyness = derivative.log_moneyness()

time_to_maturity = derivative.time_to_maturity()

volatility = stock.volatility

torch.cat([log_moneyness, time_to_maturity, volatility])

log_moneyness.shape

time_to_maturity.shape

volatility.shape

torch.cat([log_moneyness, time_to_maturity, volatility]).shape

torch.cat([log_moneyness.unsqueeze(-1) for i in range(3)], dim=2)

f = [log_moneyness, time_to_maturity, volatility]

result = torch.cat([t.unsqueeze(-1) for t in f], dim=2)
result

input = result

m(input)

delta = torch.tensor([m(input[:,i]) for i in range(input.shape[1])]).unsqueeze(0)

input.shape[1]

pfhedge.nn.functional.pl(stock.spot, m(input).squeeze(-1))

stock.spot.unsqueeze(1).shape

m(input).squeeze(-1).unsqueeze(1).shape

pfhedge.nn.functional.pl(stock.spot.unsqueeze(1), m(input).squeeze(-1).unsqueeze(1))

