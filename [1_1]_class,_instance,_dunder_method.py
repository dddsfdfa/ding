# -*- coding: utf-8 -*-
"""[1_1] class, instance, dunder_method

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mi9UJvmkKnsvBzvplBNA0WE8ARjAStnH

# Why do we need a `class`?
"""

!pip install pfhedge

from pfhedge.instruments import BrownianStock

stock = BrownianStock()

stock

"""# Defining a class

What is the difference in defining a class with or without parenthesis in Python 3?
"""

class Tensor():
    pass

class Tensor:
    pass

Tensor()

Tensor()

BrownianStock()

"""# Instance through Instantiation

What is <> in <\_\_main\_\_.Tensor at 0x7f4085356f80>?
"""

Tensor()

a = Tensor()
a

Tensor

BrownianStock()

"""# \_\_repr\_\_"""

class Tensor:

    def __repr__(self):
        return "Tensor instance"

Tensor()

BrownianStock(cost=0.0)

"""# \_\_init\_\_"""

class Tensor:
    def __init__(self, data):
        self.data = data

    def __repr__(self):
        return f"Tensor with {self.data}"

Tensor(1.0)

a = Tensor(1.0)
a

a.data

a.data = 2
a

a = Tensor(1.0)
b = Tensor(2.0)

a, b

a + b

"""## \_\_add\_\_"""

class Tensor:
    def __init__(self, data):
        self.data = data

    def __add__(self, other):
        out = Tensor(self.data + other.data)
        return out

    def __repr__(self):
        return f"Tensor with {self.data}"

a = Tensor(1.0)
b = Tensor(2.0)

a

b

(a + b)

"""# `self` ???"""

a.__add__(b)

b.__repr__()

a.data

b.data

"""# List"""

[1, 2, 3] + [4, 5]

[1, 2 ,3].__add__([4,5])



"""# \_\_mul\_\_"""

class Tensor:
    def __init__(self, data):
        self.data = data

    def __add__(self, other):
        out = Tensor(self.data + other.data)
        return out

    def __mul__(self, other):
        out = Tensor(self.data * other.data)
        return out

    def __repr__(self):
        return f"Tensor with {self.data}"

a = Tensor(1.0)
b = Tensor(2.0)
c = Tensor(5.0)

a + b

(a + b) * c

(a.__add__(b)).__mul__(c)

a + 1.0

isinstance(1.0, Tensor)

"""# Upgrade"""

class Tensor:
    def __init__(self, data):
        self.data = data

    def __add__(self, other):
        other = other if isinstance(other, Tensor) else Tensor(other)
        out = Tensor(self.data + other.data)
        return out

    def __mul__(self, other):
        out = Tensor(self.data * other.data)
        return out

    def __repr__(self):
        return f"Tensor with {self.data}"

a = Tensor(1.0)

a + 1

a + 2
a.__add__()

1 + a

"""# \_\_radd\_\_"""

class Tensor:
    def __init__(self, data):
        self.data = data

    def __add__(self, other):
        other = other if isinstance(other, Tensor) else Tensor(other)
        out = Tensor(self.data + other.data)
        return out

    def __mul__(self, other):
        out = Tensor(self.data * other.data)
        return out

    def __radd__(self, other):
        print(self, other)
        return self + other

    def __repr__(self):
        return f"Tensor with {self.data}"

a = Tensor(1.0)

1 + a

a = Tensor(1.0)

20 + a

"""# Simulate"""

