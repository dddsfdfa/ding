# -*- coding: utf-8 -*-
"""[6_1] Brownian motion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PNN05ievoODjek8DRGUbf5kEKfe_5wWd
"""

import numpy as np
import matplotlib.pyplot as plt

np.random.choice([-1,1], (2,10))

np.random.choice([-1,1], (2,100)).cumsum(-1)

M = np.random.choice([-1,1], 100)
M[0] = 0
M.cumsum()

plt.plot(M.cumsum())

M = np.random.choice([-1,1], (10, 100))
M[:,0] = 0
M

M = np.random.choice([-1,1], (100, 1000))
M[:,0] = 0
plt.plot(M.cumsum(-1).T)
plt.show()

"""# With torch"""

import torch
from torch import Tensor

torch.manual_seed(42)
torch.randn(2,8)

randn = torch.randn(2,8)
randn

randn.shape

randn[:,0] = 0.0

randn.cumsum(axis=-1)

randn

torch.randn(2,100).cumsum(-1)



randn = torch.randn(20,100)
randn[:,0] = 0.0
brown = randn.cumsum(-1) * Tensor([1/250]).sqrt()

plt.plot(brown.T)
plt.show()



"""```
init_state = cast_state(init_state, dtype=dtype, device=device)

init_value = init_state[0]
# randn = torch.randn((n_paths, n_steps), dtype=dtype, device=device)
randn = engine(*(n_paths, n_steps), dtype=dtype, device=device)
randn[:, 0] = 0.0
drift = mu * dt * torch.arange(n_steps).to(randn)
brown = randn.new_tensor(dt).sqrt() * randn.cumsum(1)
return drift + sigma * brown + init_value

```
"""

randn = torch.randn(2,10)

randn[:,0] = 0.0
randn

drift = 0.01 * 1/250 * torch.arange(10)
drift

torch.tensor(0.1).sqrt() * randn.cumsum(1)



"""```
init_state = cast_state(init_state, dtype=dtype, device=device)

brownian = generate_brownian(
    n_paths=n_paths,
    n_steps=n_steps,
    init_state=(0.0,),
    sigma=sigma,
    mu=mu,
    dt=dt,
    dtype=dtype,
    device=device,
    engine=engine,
)
t = dt * torch.arange(n_steps).to(brownian).unsqueeze(0)
return init_state[0] * (brownian - (sigma ** 2) * t / 2).exp()
```
"""

t = torch.tensor(0.1) * torch.arange(10)

t = torch.tensor(0.1) * torch.arange(10).unsqueeze(0)

t

randn

randn - (0.2 ** 2) * t /2

randn - (0.2 ** 2) * t /2

